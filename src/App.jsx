import * as THREE from 'three'
import React, {forwardRef, useRef} from 'react'
import {Canvas} from '@react-three/fiber'
import {
  OrbitControls,
  Environment,
  useGLTF,
  Backdrop,
  ContactShadows,
  PerspectiveCamera,
} from '@react-three/drei'
import {editable as e, SheetProvider} from '@theatre/r3f'
import state from './state.json'
import {getProject} from '@theatre/core'

const EditableCamera = e(PerspectiveCamera, 'perspectiveCamera')

// Auto-generated by: https://github.com/pmndrs/gltfjsx
const Spaceman = forwardRef(({children, ...props}, ref) => {
  const {nodes, materials} = useGLTF('/Astronaut-transformed.glb')
  return (
    <e.mesh
      uniqueName="spaceman"
      castShadow
      receiveShadow
      ref={ref}
      {...props}
      geometry={nodes.Astronaut_mesh.geometry}
      material={materials.Astronaut_mat}
      material-envMapIntensity={0}
      dispose={null}
    >
      {children}
    </e.mesh>
  )
})

// One-click copy/paste from the poimandres market: https://market.pmnd.rs/model/low-poly-spaceship
const Ship = forwardRef((props, ref) => {
  const {nodes, materials} = useGLTF(
    'https://vazxmixjsiawhamofees.supabase.co/storage/v1/object/public/models/low-poly-spaceship/model.gltf',
  )
  return (
    <e.group ref={ref} {...props} dispose={null} uniqueName="spaceship">
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube005.geometry}
        material={materials.Mat0}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube005_1.geometry}
        material={materials.Mat1}
        material-color="black"
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube005_2.geometry}
        material={materials.Mat2}
        material-envMapIntensity={0.2}
        material-color="black"
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube005_3.geometry}
        material={materials.Window_Frame}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube005_4.geometry}
        material={materials.Mat4}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube005_5.geometry}
        material={materials.Mat3}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube005_6.geometry}
        material={materials.Window}
      />
    </e.group>
  )
})

export default function App() {
  const spaceman = useRef()
  const ship = useRef()
  return (
    <Canvas dpr={[1, 2]} shadows gl={{preserveDrawingBuffer: true}}>
      <SheetProvider sheet={getProject('Space', {state}).sheet('Thingy')}>
        <EditableCamera
          uniqueName="camera"
          makeDefault
          position={[0, 0, 16]}
          fov={75}
        ></EditableCamera>
        <ambientLight intensity={0.2} />
        <directionalLight position={[-10, 0, -5]} intensity={1} color="red" />
        <directionalLight position={[-10, 0, -5]} intensity={1} color="red" />
        <e.directionalLight
          uniqueName="editor_light"
          visible="editor"
          position={[-1, -2, -5]}
          intensity={0.2}
          color="#fff"
        />
        <spotLight
          position={[5, 0, 5]}
          intensity={2.5}
          penumbra={1}
          angle={0.35}
          castShadow
          color="#0c8cbf"
        />
        <Ship ref={ship} />
        <Spaceman>
          <object3D position={[-0.6, 2, 0]} ref={spaceman} />
        </Spaceman>
        <Backdrop
          castShadow
          floor={2}
          position={[0, -0.5, -3]}
          scale={[50, 10, 4]}
        >
          <meshStandardMaterial color="#353540" envMapIntensity={0.1} />
        </Backdrop>
        <ContactShadows
          position={[0, -0.485, 0]}
          scale={5}
          blur={1.5}
          far={1}
        />
        <Environment preset="city" />
        <OrbitControls makeDefault />
      </SheetProvider>
    </Canvas>
  )
}
